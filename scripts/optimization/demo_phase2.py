#!/usr/bin/env python3
"""
Demostraci√≥n Completa del Optimizador de Hiperpar√°metros - Fase 2
Muestra todas las capacidades avanzadas implementadas
"""

import sys
import os
import time
from pathlib import Path
import argparse

# Agregar paths necesarios
sys.path.append(os.path.join(os.path.dirname(__file__), '..', '..'))

def demo_quick_optimization():
    """Demostraci√≥n de optimizaci√≥n r√°pida"""
    print("üöÄ DEMO: Optimizaci√≥n R√°pida (5 minutos)")
    print("="*60)
    
    try:
        from crypto_hyperparameter_optimizer import CryptoHyperparameterOptimizer
        
        # Configurar paths
        data_path = "/home/exodia/Documentos/MachineLearning_TF/data/ml_dataset.csv"
        results_path = Path("/tmp/demo_quick_optimization")
        results_path.mkdir(exist_ok=True)
        
        # Crear optimizador
        optimizer = CryptoHyperparameterOptimizer(
            data_path=data_path,
            results_path=str(results_path)
        )
        
        # Cargar datos
        print("üìÅ Cargando datos...")
        optimizer.load_and_prepare_data()
        
        # Optimizaci√≥n r√°pida de XGBoost
        print("üî• Optimizando XGBoost (estrategia r√°pida)...")
        start_time = time.time()
        
        study = optimizer.optimize_xgboost(
            n_trials=20,
            timeout=300,  # 5 minutos
            use_temporal_cv=True,
            optimization_strategy='quick'
        )
        
        duration = time.time() - start_time
        
        print(f"\n‚úÖ Optimizaci√≥n completada en {duration:.1f}s")
        print(f"üèÜ Mejor AUC: {study.best_value:.4f}")
        print(f"üéØ Trials ejecutados: {len(study.trials)}")
        
        # Mostrar informaci√≥n de convergencia
        if optimizer.convergence_history.get('xgboost'):
            conv_info = optimizer.convergence_history['xgboost']
            print(f"üìä Early stopping: {conv_info.get('stopped', False)}")
            if conv_info.get('stopped'):
                print(f"üõë Raz√≥n: {conv_info.get('stop_reason', 'Unknown')}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error en demostraci√≥n r√°pida: {e}")
        return False

def demo_balanced_optimization():
    """Demostraci√≥n de optimizaci√≥n balanceada"""
    print("\n‚öñÔ∏è DEMO: Optimizaci√≥n Balanceada (15 minutos)")
    print("="*60)
    
    try:
        from crypto_hyperparameter_optimizer import CryptoHyperparameterOptimizer
        
        # Configurar paths
        data_path = "/home/exodia/Documentos/MachineLearning_TF/data/ml_dataset.csv"
        results_path = Path("/tmp/demo_balanced_optimization")
        results_path.mkdir(exist_ok=True)
        
        # Crear optimizador
        optimizer = CryptoHyperparameterOptimizer(
            data_path=data_path,
            results_path=str(results_path)
        )
        
        # Cargar datos
        print("üìÅ Cargando datos...")
        optimizer.load_and_prepare_data()
        
        # Optimizaci√≥n balanceada de todos los modelos
        print("üî• Optimizando todos los modelos (estrategia balanceada)...")
        start_time = time.time()
        
        optimizer.optimize_all_models(
            n_trials=50,
            timeout_per_model=300,  # 5 minutos por modelo
            use_temporal_cv=True,
            optimization_strategy='balanced'
        )
        
        duration = time.time() - start_time
        
        print(f"\n‚úÖ Optimizaci√≥n completa en {duration:.1f}s")
        
        # Mostrar resultados de todos los modelos
        print("\nüìä RESUMEN DE RESULTADOS:")
        print("-" * 40)
        
        for model_name in optimizer.best_scores.keys():
            score = optimizer.best_scores[model_name]
            print(f"üèÜ {model_name.upper()}: AUC = {score:.4f}")
            
            # Informaci√≥n de convergencia
            if optimizer.convergence_history.get(model_name):
                conv_info = optimizer.convergence_history[model_name]
                if conv_info.get('stopped'):
                    print(f"   üõë Early stopping: {conv_info.get('stop_reason', 'Unknown')}")
        
        # Evaluar mejores modelos
        print("\nüìà Evaluando mejores modelos...")
        optimizer.evaluate_best_models()
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error en demostraci√≥n balanceada: {e}")
        return False

def demo_advanced_features():
    """Demostraci√≥n de caracter√≠sticas avanzadas"""
    print("\nüéØ DEMO: Caracter√≠sticas Avanzadas")
    print("="*60)
    
    try:
        # 1. Probar samplers avanzados
        print("üé≤ Probando samplers avanzados...")
        from config.optuna_config import SAMPLER_FACTORY
        
        samplers_to_test = ['tpe', 'cmaes', 'random', 'nsga2']
        for sampler_type in samplers_to_test:
            try:
                sampler = SAMPLER_FACTORY.create_sampler(sampler_type, {})
                print(f"   ‚úÖ {sampler_type.upper()}: {type(sampler).__name__}")
            except Exception as e:
                print(f"   ‚ö†Ô∏è  {sampler_type.upper()}: {e}")
        
        # 2. Probar pruners avanzados
        print("\n‚úÇÔ∏è  Probando pruners avanzados...")
        from config.optuna_config import PRUNER_FACTORY
        
        pruners_to_test = ['median', 'successive_halving', 'hyperband', 'percentile']
        for pruner_type in pruners_to_test:
            try:
                pruner = PRUNER_FACTORY.create_pruner(pruner_type, {})
                print(f"   ‚úÖ {pruner_type.upper()}: {type(pruner).__name__}")
            except Exception as e:
                print(f"   ‚ö†Ô∏è  {pruner_type.upper()}: {e}")
        
        # 3. Probar validaci√≥n temporal
        print("\nüìÖ Probando validaci√≥n temporal...")
        from utils.temporal_validator import TEMPORAL_VALIDATOR
        print(f"   ‚úÖ Validador temporal: {type(TEMPORAL_VALIDATOR).__name__}")
        
        # 4. Probar early stopping
        print("\nüõë Probando early stopping...")
        from utils.early_stopping import ADAPTIVE_CONTROLLER
        monitor = ADAPTIVE_CONTROLLER.get_monitor('test_model')
        print(f"   ‚úÖ Controlador adaptativo: {type(ADAPTIVE_CONTROLLER).__name__}")
        print(f"   ‚úÖ Monitor creado: {type(monitor).__name__}")
        
        # 5. Probar optimizaci√≥n multi-objetivo
        print("\nüéØ Probando optimizaci√≥n multi-objetivo...")
        from utils.multi_objective import MULTI_OBJECTIVE_OPTIMIZER
        
        # Crear estudio multi-objetivo
        study = MULTI_OBJECTIVE_OPTIMIZER.create_multi_objective_study("demo_study")
        print(f"   ‚úÖ Estudio multi-objetivo: {len(study.directions)} objetivos")
        print(f"   ‚úÖ Sampler: {type(study.sampler).__name__}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error en demostraci√≥n de caracter√≠sticas avanzadas: {e}")
        return False

def demo_visualization():
    """Demostraci√≥n de visualizaciones (si est√°n disponibles)"""
    print("\nüìä DEMO: Visualizaciones")
    print("="*60)
    
    try:
        # Intentar importar matplotlib
        import matplotlib.pyplot as plt
        import optuna.visualization as vis
        
        print("‚úÖ Capacidades de visualizaci√≥n disponibles:")
        print("   üìà Optuna visualization")
        print("   üìä Matplotlib")
        
        # Crear un estudio dummy para demostraci√≥n
        import optuna
        study = optuna.create_study(direction='maximize')
        
        # Agregar algunos trials dummy
        for i in range(10):
            trial = study.ask()
            score = 0.8 + 0.1 * (i / 10) + 0.05 * ((-1) ** i)
            study.tell(trial, score)
        
        print(f"   üìä Estudio demo creado con {len(study.trials)} trials")
        print("   üí° Visualizaciones disponibles:")
        print("      - plot_optimization_history")
        print("      - plot_param_importances")
        print("      - plot_contour")
        print("      - plot_slice")
        print("      - plot_parallel_coordinate")
        
        return True
        
    except ImportError:
        print("‚ö†Ô∏è  Matplotlib no disponible - visualizaciones limitadas")
        return False

def main():
    """Funci√≥n principal de demostraci√≥n"""
    parser = argparse.ArgumentParser(description="Demostraci√≥n del Optimizador - Fase 2")
    parser.add_argument("--mode", choices=['quick', 'balanced', 'advanced', 'all'], 
                      default='quick', help="Modo de demostraci√≥n")
    parser.add_argument("--data-path", type=str, 
                      default="/home/exodia/Documentos/MachineLearning_TF/data/ml_dataset.csv",
                      help="Ruta a los datos")
    
    args = parser.parse_args()
    
    print("üé≠======================================================================")
    print("üé≠ DEMOSTRACI√ìN COMPLETA - OPTIMIZADOR FASE 2")
    print("üé≠======================================================================")
    print(f"   üéØ Modo: {args.mode}")
    print(f"   üìÅ Datos: {args.data_path}")
    
    # Verificar que existen los datos
    if not os.path.exists(args.data_path):
        print(f"‚ùå Archivo de datos no encontrado: {args.data_path}")
        print("üí° Usa datos sint√©ticos o especifica --data-path")
        return False
    
    success = True
    
    if args.mode == 'quick' or args.mode == 'all':
        success &= demo_quick_optimization()
    
    if args.mode == 'balanced' or args.mode == 'all':
        success &= demo_balanced_optimization()
    
    if args.mode == 'advanced' or args.mode == 'all':
        success &= demo_advanced_features()
        success &= demo_visualization()
    
    # Resumen final
    print("\nüéâ======================================================================")
    if success:
        print("üéâ DEMOSTRACI√ìN COMPLETADA EXITOSAMENTE")
        print("üéâ======================================================================")
        print("\n‚úÖ Capacidades demostradas:")
        print("   üöÄ Optimizaci√≥n con mejoras de Fase 2")
        print("   üéØ Samplers y pruners avanzados")
        print("   üìÖ Validaci√≥n cruzada temporal")
        print("   üõë Early stopping inteligente")
        print("   üéØ Optimizaci√≥n multi-objetivo")
        print("   üìä M√©tricas m√∫ltiples y an√°lisis")
        print("\nüìñ Para m√°s informaci√≥n:")
        print("   üìÑ README_PHASE2.md")
        print("   üß™ test_phase2_improvements.py")
    else:
        print("‚ùå DEMOSTRACI√ìN COMPLETADA CON ERRORES")
        print("‚ùå======================================================================")
        print("\nüîç Revisar:")
        print("   üì¶ Dependencias instaladas")
        print("   üìÅ Rutas de datos correctas")
        print("   üîß Configuraci√≥n del entorno")
    
    return success

if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)
